#!/usr/bin/env python3
import logging as log
import argparse
from tqdm import tqdm
import usb
from time import sleep
from threading import Thread

log.basicConfig(
    level=log.INFO,
    format="[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s",
    datefmt="%H:%M:%S")

RAW_VID=0x04B4
RAW_PID=0x00F3

OLD_VID=0x04B4
OLD_PID=0x00F1

FW_VID=0x1556
FW_PID=0x01B8

class FPGAProgrammerThread(Thread):
    def __init__(self,dev,fw):
        Thread.__init__(self)
        self.fw=fw
        self.dev=dev
        self.pbar=tqdm(total=len(self.fw),desc=self.dev.serial_number)

    def jtag_write(self,data):
        return self.dev.ctrl_transfer(0x40,0x04,0,0,data)
    
    def jtag_read(self,n):
        return self.dev.ctrl_transfer(0xC0,0x03,0,0,n)

    def run(self):
        self.jtag_write([0x22,0x23,0x22,0x23,0x22,0x23,0x22,0x23,0x22,0x23]) # (5x TMS=1)
        self.jtag_write([0x20,0x21,0x22,0x23,0x20,0x21,0x20,0x21]) # (TMS: 0,1,0,0)
        did=[]
        for i in range(32):
            self.jtag_write([0x60,0x21]) # SELECT SHIFT DR (TMS: 0)
            data=self.jtag_read(1)
            did=[data[0]]+did
        assert did==[0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,1,1,0,1,1,1,0,1]
        self.jtag_write([0x22,0x23,0x22,0x23,0x22,0x23,0x22,0x23,0x22,0x23]) # JTAG RESET (5x TMS=1)
        self.jtag_write([0x20,0x21,0x22,0x23,0x22,0x23,0x20,0x21,0x20,0x21]) # SELECT SHIFT IR (TMS 0,1,1,0,0)
        self.jtag_write([0x20,0x21,0x30,0x31,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x22,0x23]) # SHIFT IR (10bit: 0x002 TMS 1 on last)
        self.jtag_write([0x22,0x23,0x20,0x21]) # SELECT IDLE (TMS 1,0)
        self.jtag_write([0x22,0x23,0x20,0x21,0x20,0x21]) # SELECT SHIFT DR (TMS 1,0,0)
        n=len(self.fw)-1
        i=0
        while n>0:
            ni=0x3F if n>0x3F else n
            self.pbar.update(ni)
            self.jtag_write(bytes([0x80|ni])+self.fw[i:i+ni])
            i+=ni
            n-=ni
        for i in range(7):
            self.jtag_write([0x20|(self.fw[-1]>>i&1)<<4,0x21|(self.fw[-1]>>i&1)<<4])
        self.jtag_write([0x22|(self.fw[-1]>>7&1)<<4,0x23|(self.fw[-1]>>7&1)<<4])
        self.jtag_write([0x22,0x23,0x20,0x21]) # JTAG RESET (TMS 1,0)
        for i in range(125*5):
            self.jtag_write([0x80|25]+[0]*25)
        sleep(1)
        self.jtag_write([0x22,0x23,0x22,0x23,0x22,0x23,0x22,0x23,0x22,0x23]) # JTAG RESET (5x TMS=1)
        self.jtag_write([0x20,0x21,0x22,0x23,0x22,0x23,0x20,0x21,0x20,0x21]) # SELECT SHIFT IR (TMS 0,1,1,0,0)
        self.jtag_write([0x30,0x31,0x30,0x31,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x22,0x23]) # SHIFT IR (10bit: 0x003 TMS 1 on last)
        self.jtag_write([0x22,0x23,0x20,0x21]) # SELECT IDLE (TMS 1,0)
        for i in range(125*5):
            self.jtag_write([0x80|25]+[0]*25)
        self.jtag_write([0x22,0x23,0x22,0x23,0x22,0x23,0x22,0x23,0x22,0x23]) # JTAG RESET (5x TMS=1)
        self.pbar.update(n+1)
        self.pbar.refresh()

    def join(self):
        Thread.join(self)
        self.pbar.refresh()
        self.pbar.close()

def get_uid(dev):
    if dev.idVendor==RAW_VID and dev.idProduct==RAW_PID:
        sn=dev.ctrl_transfer(0xC0,0xA0,0x5010,0xE005,8)
        sn='DAQ-'+''.join(reversed(['%02X'%b for b in sn]))
        return sn
    elif dev.idVendor==FW_VID and dev.idProduct==FW_PID:
        return dev.serial_number
    else:
        assert False,'ERROR: unknown VID/PID'

def list_fx3():
    for name,vid,pid in [("programmed"  ,FW_VID ,FW_PID ),
                         ("unprogrammed",RAW_VID,RAW_PID),
                         ("old"         ,OLD_VID,OLD_PID)]:
        devs=list(usb.core.find(idVendor=vid,idProduct=pid,find_all=True))
        if len(devs)>0: print(len(devs),"device(s) with",name,"FX3 firmware found:")
        for dev in devs:
            sn=get_uid(dev)
            print('- %s (bus: %d, address %s)'%(sn,dev.bus,dev.address))

def program_fx3(dev,fw):
    dev.set_configuration(0)
    dev.set_configuration(1)
    sig=(fw[1])<<8|(fw[0])
    assert sig==0x5943
    ptr=4
    while True:
        data=fw[ptr:ptr+4]
        ptr+=4
        length =(data[3])<<24|(data[2])<<16|(data[1])<<8|(data[0])
        length*=4
        data=fw[ptr:ptr+4]
        ptr+=4
        address=(data[3])<<24|(data[2])<<16|(data[1])<<8|(data[0])
        #print("%08X: %d bytes" %(address,length))
        if length==0:
            dev.ctrl_transfer(0x40,0xA0,address&0xFFFF,address>>16&0xFFFF,[])
            break
        while (length!=0):
            dl=min(4096,length)
            data=fw[ptr:ptr+dl]
            ptr+=dl
            dev.ctrl_transfer(0x40,0xA0,address&0xFFFF,address>>16&0xFFFF,data)
            address+=dl
            length-=dl

if __name__=='__main__':
    parser=argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,argument_default=argparse.SUPPRESS)
    parser.add_argument('-l','--list',action='store_true',help='Only list devices')
    parser.add_argument('--fx3'      ,default='fx3.img'  ,help='FX3 firmware image file',metavar='firmware-file')
    parser.add_argument('--serial'                       ,help='FX3 serial number to use')                         
    parser.add_argument('--fpga'     ,default='fpga.bit' ,help='FPGA firmware image file',metavar='firmware-file')
    parser.add_argument('--no-fx3'   ,action='store_true',help='Do not try programming the FX3')
    parser.add_argument('--no-fpga'  ,action='store_true',help='Do not try programming the FPGA')
    parser.add_argument('--all'      ,action='store_true',help='Program as many devices as possible')

    args=parser.parse_args()

    if 'list' in args:
        list_fx3()
        raise SystemExit()

    if not 'no_fx3' in args:
        devs=list(usb.core.find(idVendor=RAW_VID,idProduct=RAW_PID,find_all=True))
        if len(devs)>0:
            if 'serial' in args:
                devs=[dev for dev in devs if get_uid(dev)==args.serial]
                if len(devs)==0:
                    print('No unprogrammed FX3 devices with serial number "%s" found. Skipping FX3 programming step.'%args.serial)
            if len(devs)>1 and not 'all' in args:
                print('Too many unprogrammed FX3 devices found. Either use --all or --serial. Exiting.')
                raise SystemExit(1)
            with open(args.fx3,'rb') as f:
                fx3fw=f.read()
                unprogrammed_serials=set(get_uid(dev) for dev in devs)
                print('Programming FX3(s): %s ...'%list(unprogrammed_serials),end='',flush=True)
                for dev in devs:
                    program_fx3(dev,fx3fw)
                print('DONE')
                print('Waiting for re-enumeration...')
                sleep(2) # prevents langid ValueError
                while True:
                    devs=list(usb.core.find(idVendor=FW_VID,idProduct=FW_PID,find_all=True))
                    programmed_serials=set(get_uid(dev) for dev in devs)
                    print('\r',end='')
                    for dev in unprogrammed_serials|programmed_serials:
                        if dev in programmed_serials:
                            print('  %s: DONE'%dev,end='',flush=True)
                        else:
                            print('  %s: WAIT'%dev,end='',flush=True)
                    if unprogrammed_serials<=programmed_serials:
                        print('ALL DONE')
                        break
                    sleep(0.1)
        else:
            print('No unprogrammed FX3 device found. Skipping FX3 programming step.');

    if not 'no_fpga' in args:
        devs=list(usb.core.find(idVendor=FW_VID,idProduct=FW_PID,find_all=True))
        if len(devs)>0:
            if 'serial' in args:
                devs=[dev for dev in devs if get_uid(dev)==args.serial]
                if len(devs)==0:
                    print('No programmed FX3 devices with serial number "%s" found. Skipping FGPA programming step.'%args.serial)
            if len(devs)>1 and not 'all' in args:
                print('Too many programmed FX3 devices found. Either use --all or --serial. Exiting.')
                raise SystemExit(1)
            if len(devs)>0:
                programmed_serials=set(get_uid(dev) for dev in devs)
                print('Programming FPGA(s)...')
                with open(args.fpga,'rb') as f:
                    fpgafw=f.read()
                    ts=[]
                    for dev in devs:
                        t=FPGAProgrammerThread(dev,fpgafw)
                        t.start()
                        ts.append(t)
                    for t in reversed(ts): t.join()
                print('FPGA programming DONE')
        else:
            print('No programmed FX3 device found. Skipping FPGA programming step.');

