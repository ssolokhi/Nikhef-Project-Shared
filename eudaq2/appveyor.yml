version: 2.0.0.{build}

pull_requests:
  do_not_increment_build_number: true
  
branches:
  only:
  - master
  - v1.7-dev

os: Visual Studio 2017

configuration: Release

#  - x64
platform: x86 

# comments on options:
# BIFAHCAL: Requires cactus and does not compile properly on Windows
# 
environment:
  matrix:
    - build_type: full
      ROOTSYS: C:\root
      PATH: '%ROOTSYS%\bin;C:\Qt\5.9\msvc2017;C:\Python36;C:\Miniconda36;C:\Miniconda36\\Scripts;%PATH%'
      CMAKE_BUILD_TYPE: RelWithDebInfo
      EUDAQ_BUILD_EXECUTABLE: ON
      EUDAQ_BUILD_GUI: ON
      EUDAQ_BUILD_MANUAL: OFF
      EUDAQ_BUILD_STDEVENT_MONITOR: ON
      EUDAQ_EXTRA_BUILD_NREADER: OFF
      EUDAQ_LIBRARY_BUILD_LCIO: ON
      EUDAQ_MODULE_BUILD_STD: ON
      USER_CALICE_BUILD: OFF
      USER_EUDET_BUILD: ON
      USER_EUDET_BUILD_NI: ON
      USER_EUDET_BUILD_TLU: ON
      USER_EXAMPLE_BUILD: ON
      USER_ITKSTRIP_BUILD: OFF
      USER_ITKSTRIP_BUILD_ITSROOT: OFF
      EUDAQ_BUILD_ONLINE_ROOT_MONITOR: ON
      PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.5" 
      PYTHON_ARCH: "32"
    - build_type: minimum
      ROOTSYS: C:\root
      PATH: '%ROOTSYS%\bin;C:\Qt\5.9\msvc2017;C:\Python36;C:\Miniconda36;C:\Miniconda36\\Scripts;%PATH%'
      CMAKE_BUILD_TYPE: RelWithDebInfo
      EUDAQ_BUILD_EXECUTABLE: ON
      EUDAQ_BUILD_GUI: ON
      EUDAQ_BUILD_MANUAL: OFF
      EUDAQ_BUILD_STDEVENT_MONITOR: ON
      EUDAQ_EXTRA_BUILD_NREADER: OFF
      EUDAQ_LIBRARY_BUILD_LCIO: ON
      EUDAQ_MODULE_BUILD_STD: ON
      USER_CALICE_BUILD: OFF
      USER_EUDET_BUILD: ON
      USER_EUDET_BUILD_NI: ON
      USER_EUDET_BUILD_TLU: ON
      USER_EXAMPLE_BUILD: ON
      USER_ITKSTRIP_BUILD: OFF
      USER_ITKSTRIP_BUILD_ITSROOT: OFF
      EUDAQ_BUILD_ONLINE_ROOT_MONITOR: ON
      PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.5" 
      PYTHON_ARCH: "32"
    - build_type: library_only
      ROOTSYS: C:\root
      PATH: '%ROOTSYS%\bin;C:\Qt\5.9\msvc2017;C:\Python36;C:\Miniconda36;C:\Miniconda36\\Scripts;%PATH%'
      CMAKE_BUILD_TYPE: RelWithDebInfo
      EUDAQ_BUILD_EXECUTABLE: OFF
      EUDAQ_BUILD_GUI: OFF
      EUDAQ_BUILD_MANUAL: OFF
      EUDAQ_BUILD_STDEVENT_MONITOR: OFF
      EUDAQ_EXTRA_BUILD_NREADER: OFF
      EUDAQ_LIBRARY_BUILD_LCIO: ON
      EUDAQ_MODULE_BUILD_STD: ON
      USER_CALICE_BUILD: OFF
      USER_EUDET_BUILD: OFF
      USER_EUDET_BUILD_NI: OFF
      USER_EUDET_BUILD_TLU: OFF
      USER_EXAMPLE_BUILD: OFF
      USER_ITKSTRIP_BUILD: OFF
      USER_ITKSTRIP_BUILD_ITSROOT: OFF
      EUDAQ_BUILD_ONLINE_ROOT_MONITOR: OFF
      PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.5" 
      PYTHON_ARCH: "32"

cache:
  - '%APPVEYOR_BUILD_FOLDER%\extern\ZestSC1'
  - '%APPVEYOR_BUILD_FOLDER%\extern\tlufirmware'
  - '%APPVEYOR_BUILD_FOLDER%\extern\libusb-win32'
  - '%APPVEYOR_BUILD_FOLDER%\extern\alice-its-alpide-software-master-3189f00d7515733d46a61a5ab2606e436df4955b'
  - '%APPVEYOR_BUILD_FOLDER%\extern\tinyxml'  
  
init:
# The following line enables the remote desktop connection and show the connection information.
- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

install:
#- '"C:\Program Files\Microsoft SDKs\Windows\v10\Bin\SetEnv.cmd" /x86'
# This is a workaround for a whole lot of annoying warnings about non-existing targets.
#- cmd: del "C:\Program Files (x86)\MSBuild\15.0\Microsoft.Common.targets\ImportAfter\Xamarin.Common.targets"

# Install Python (from the official .msi of http://python.org) and pip when not already installed.
# This was copied from 
- ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install_python.ps1 }    
# Prepend newly installed Python to the PATH of this build (this cannot be
# done from inside the powershell script as it would require to restart
# the parent CMD process).
- "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
# Check that we have the expected version and architecture for Python
- "python --version"
- "python -c \"import struct; print(struct.calcsize('P') * 8)\""
# Upgrade to the latest version of pip to avoid it displaying warnings
# about it being out of date.
- "python -m pip install --disable-pip-version-check --user --upgrade pip"
# Install the build dependencies of the project. If some dependencies contain
# compiled extensions and are not provided as pre-built wheel packages,
# pip will build them from source using the MSVC compiler matching the
# target Python version and architecture
- "%CMD_IN_ENV% python -m pip install -r appveyor\\dev-requirements.txt"    
    
before_build:    
- ps: Write-Host "Downloading root from root.cern.ch"; appveyor\download.ps1 -downloadLocation 'https://root.cern/download/root_v6.22.08.win32.vc16.zip' -storageLocation 'C:\\root_v6.22.08.win32.vc16.zip'; 7z -y x C:\\root_v6.22.08.win32.vc16.zip -oC:\;

- ps: appveyor\install_afs.ps1;

- ps: Restart-Computer -Force

- ps: Start-Sleep -s 10;

build_script:
- ps: If( Test-Path("\\afs\desy.de\group\telescopes\")) { Write-Host("Afs seems to work properly")} ElseIf ( Test-Path("\\cern.ch\")) {Write-Host("Afs seems to work properly, but desy afs down?"); } Else { Write-Host("Something wrong with the afs installation"); }

#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

- ps: If (Test-Path ("${env:APPVEYOR_BUILD_FOLDER}" + "\extern\ZestSC1")) {Write-Host ("Reusing cached ZestSC1 " + "${env:APPVEYOR_BUILD_FOLDER}" + "\extern\ZestSC1" + " instead of copying from AFS")} Else {Write-Host "Copying ZestSC1 from AFS"; Copy-item "\\afs\desy.de\group\telescopes\tlu\ZestSC1" -destination ("${env:APPVEYOR_BUILD_FOLDER}" + "\extern\ZestSC1") -recurse}

- ps: If (Test-Path ("${env:APPVEYOR_BUILD_FOLDER}" + "\extern\tlufirmware")) {Write-Host ("Reusing cached tlufirmware " + "${env:APPVEYOR_BUILD_FOLDER}" + "\extern\tlufirmware" + " instead of copying from AFS")} Else {Write-Host "Copying tlufirmware from AFS"; Copy-item "\\afs\desy.de\group\telescopes\tlu\tlufirmware" -destination ("${env:APPVEYOR_BUILD_FOLDER}" + "\extern\tlufirmware") -recurse}

- ps: If (Test-Path ("${env:APPVEYOR_BUILD_FOLDER}" + "\extern\libusb-win32")) {Write-Host ("Reusing cached libusb-win32 " + "${env:APPVEYOR_BUILD_FOLDER}" + "\extern\libusb-win32" + " instead of downloading from sourcefourge (which can be sometimes unreliable...)")} Else {Write-Host "Downloading libusb-win32 from sourceforge"; appveyor\download.ps1 -downloadLocation 'https://sourceforge.net/projects/libusb-win32/files/libusb-win32-releases/1.2.6.0/libusb-win32-bin-1.2.6.0.zip' -storageLocation 'C:\\libusb-win32-bin-1.2.6.0.zip'; $zipargument = ("-o" + "${env:APPVEYOR_BUILD_FOLDER}" + "\extern\"); 7z -y x C:\\libusb-win32-bin-1.2.6.0.zip $zipargument;  Rename-Item -path ("${env:APPVEYOR_BUILD_FOLDER}" + "\extern\libusb-win32-bin-1.2.6.0") -newName ("${env:APPVEYOR_BUILD_FOLDER}" + "\extern\libusb-win32")}

- ps: If (${env:BUILD_cmspixel} -eq "ON") { Write-Host("Installing pxarcore as required by cmspixel producer"); . ".\appveyor\install_pxar.ps1" }

- ps: If (${env:BUILD_palpidefs} -eq "ON") { Write-Host("Installing palpidefs drivers as required by palpidefs producer"); . ".\appveyor\install_tinyxml.ps1";. ".\appveyor\install_palpidefs_driver.ps1" }
- ps: If (${env:BUILD_palpidefs} -eq "ON") { [Environment]::SetEnvironmentVariable("PALPIDEFS_SPECIAL_PARAMETERS", "-DCMAKE_PALPIDEFS_DRIVER_INCLUDE:FILEPATH=%APPVEYOR_BUILD_FOLDER%\extern\alice-its-alpide-software-master-3189f00d7515733d46a61a5ab2606e436df4955b\pALPIDEfs-software -DUSE_TINYXML=on -DUSE_ROOT=on", "Process"); } Else { [Environment]::SetEnvironmentVariable("PALPIDEFS_SPECIAL_PARAMETERS", "", "Process"); }

# creating installation folder
- mkdir C:\eudaq_installation_folder

# creating build folder
- mkdir C:\eudaq_build_folder

- cd C:\eudaq_build_folder

- cmd: echo -DEUDAQ_INSTALL_PREFIX=C:/eudaq_installation_folder/ -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% -DEUDAQ_BUILD_EXECUTABLE=%EUDAQ_BUILD_EXECUTABLE% -DEUDAQ_BUILD_GUI=%EUDAQ_BUILD_GUI% -DEUDAQ_BUILD_MANUAL=%EUDAQ_BUILD_MANUAL% -DEUDAQ_BUILD_STDEVENT_MONITOR=%EUDAQ_BUILD_STDEVENT_MONITOR% -DEUDAQ_EXTRA_BUILD_NREADER=%EUDAQ_EXTRA_BUILD_NREADER% -DEUDAQ_LIBRARY_BUILD_LCIO=%EUDAQ_LIBRARY_BUILD_LCIO% -DEUDAQ_MODULE_BUILD_STD=%EUDAQ_MODULE_BUILD_STD% -DUSER_CALICE_BUILD=%USER_CALICE_BUILD% -DUSER_EUDET_BUILD=%USER_EUDET_BUILD% -DUSER_EUDET_BUILD_NI=%USER_EUDET_BUILD_NI% -DUSER_EUDET_BUILD_TLU=%USER_EUDET_BUILD_TLU% -DUSER_EXAMPLE_BUILD=%USER_EXAMPLE_BUILD% -DUSER_ITKSTRIP_BUILD=%USER_ITKSTRIP_BUILD% -DUSER_ITKSTRIP_BUILD_ITSROOT=%USER_ITKSTRIP_BUILD_ITSROOT% -DEUDAQ_BUILD_ONLINE_ROOT_MONITOR=%EUDAQ_BUILD_ONLINE_ROOT_MONITOR%  %APPVEYOR_BUILD_FOLDER%

#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

- cmd: cmake -DEUDAQ_INSTALL_PREFIX=C:/eudaq_installation_folder/  -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% -DEUDAQ_BUILD_EXECUTABLE=%EUDAQ_BUILD_EXECUTABLE% -DEUDAQ_BUILD_GUI=%EUDAQ_BUILD_GUI% -DEUDAQ_BUILD_MANUAL=%EUDAQ_BUILD_MANUAL% -DEUDAQ_BUILD_STDEVENT_MONITOR=%EUDAQ_BUILD_STDEVENT_MONITOR% -DEUDAQ_EXTRA_BUILD_NREADER=%EUDAQ_EXTRA_BUILD_NREADER% -DEUDAQ_LIBRARY_BUILD_LCIO=%EUDAQ_LIBRARY_BUILD_LCIO% -DEUDAQ_MODULE_BUILD_STD=%EUDAQ_MODULE_BUILD_STD% -DUSER_CALICE_BUILD=%USER_CALICE_BUILD% -DUSER_EUDET_BUILD=%USER_EUDET_BUILD% -DUSER_EUDET_BUILD_NI=%USER_EUDET_BUILD_NI% -DUSER_EUDET_BUILD_TLU=%USER_EUDET_BUILD_TLU% -DUSER_EXAMPLE_BUILD=%USER_EXAMPLE_BUILD% -DUSER_ITKSTRIP_BUILD=%USER_ITKSTRIP_BUILD% -DUSER_ITKSTRIP_BUILD_ITSROOT=%USER_ITKSTRIP_BUILD_ITSROOT%   %APPVEYOR_BUILD_FOLDER%

#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

- cmd: msbuild INSTALL.vcxproj

after_build:
- cmd: 7z a eudaq_win32_%build_type%_%APPVEYOR_REPO_TAG_NAME%.zip %APPVEYOR_BUILD_FOLDER%
- cmd: appveyor PushArtifact eudaq_win32_%build_type%_%APPVEYOR_REPO_TAG_NAME%.zip

deploy:
  provider: GitHub
  auth_token:
    secure: "FXNTEGEjMMl3FZLCp4cXO0Szn3CVs4lEf+pPxz6vbb9q/PHkD5N2gAgOR+zljtll"
  artifact: eudaq_win32_%build_type%_%APPVEYOR_REPO_TAG_NAME%.zip
  draft: false
  prerelease: false
  force_update: true
  on:
    appveyor_repo_tag: true
    build_type: minimum
    
on_finish:
#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
